* AZ 204 Certification https://learn.microsoft.com/en-us/certifications/azure-developer/ https://www.examtopics.com/exams/microsoft/az-204/view/2/
- Create Azure App Service web apps
- Implement Azure Functions
- Develop solutions that use Blob storage
- Develop solutions that use Azure Cosmos DB
- Implement infrastructure as a service solutions
- Implement user authentication and authorization
- Implement secure cloud solutions
- Implement API Management
- Develop event-based solutions
- Develop message-based solutions
- Instrument solutions to support monitoring and logging
- Integrate caching and content delivery within solutions

* App settings are always encrypted when stored (encrypted-at-rest).

A> Azure Functions
Every function has one and only one trigger. 
A function app provides an execution context in Azure in which your functions run.
The code for all the functions in a specific function app is located in a root project folder that contains a host configuration file. The host.json

B> Durable Function Workflows
The durable functions extension lets you define stateful workflows
*Function chaining
*Fan out/fan in
*Async HTTP APIs
*Monitor
*Human interaction

C> Durable Function Types
Types of durable functions
Orchestrator functions
Activity functions
Entity functions
Client functions

D> Task Hub
A task hub in Azure Storage consists of the following resources:
One or more control queues.
One work-item queue.
One history table.
One instances table.
One storage container containing one or more lease blobs.
A storage container containing large message payloads, if applicable.

E> Blob Storage Resources
Storage Account => Container => Blob

F> Types of Blobs
Block blobs
Append blobs
Page blobs

G> Azure Storage Client Library
*namespace : 
Azure.Storage.Blobs
*classes :
BlobClient
BlobClientOptions
BlobContainerClient
BlobServiceClient
BlobUriBuilder

H> Cosmos DB Request Units
The cost of all database operations is normalized by Azure Cosmos DB and is expressed by request units. 
A request unit represents the system resources such as CPU, IOPS, and memory that are required to perform the database operations supported by Azure Cosmos DB.

K> Microsoft.Azure.Cosmos NuGet package
dotnet add package Microsoft.Azure.Cosmos
CosmosClient : CosmosClient client = new CosmosClient(endpoint, key);
database = client.CreateDatabaseIfNotExistsAsync(databaseId);
ContainerResponse simpleContainer = await database.CreateContainerIfNotExistsAsync(
    id: containerId,
    partitionKeyPath: partitionKey,
    throughput: 400);
Container container = database.GetContainer(containerId);
ItemResponse<SalesOrder> response = await container.CreateItemAsync(salesOrder, new PartitionKey(salesOrder.AccountNumber));

A> Account=>Subscription=>Resource Group=>Resource=>
Azure Region => Availibility Zone

B> Azure VM Availibility Set
Fault Domain
Update Domain

C> VM Scale Sets

D> Azure Load Balancer

E> Azure Resource Manager - templates
When you deploy a template, Resource Manager converts the template into REST API operations.

F> Azure template deployment options
Azure portal
Azure CLI
PowerShell
REST API
Button in GitHub repository
Azure Cloud Shell

G> Share templates
Template specs enable you to store a template as a resource type.

H> Sample code ARM templates deployment
New-AzResourceGroupDeployment `
  -Mode Complete `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile c:\MyTemplates\storage.json

az deployment group create \
  --mode Complete \
  --name ExampleDeployment \
  --resource-group ExampleResourceGroup \
  --template-file storage.json

I> Azure Container Registry is a private docker repository in Azure

J>Azure Authentication
Single Tenant, Multi Tenant, Application Object, Service Principal Object
Application ID, Client ID, 
ApplicationObject => ServicePrincipalObjects,

Types of Security Principal
1> user principal
2> service principal

Types of Service Principal
1> Application
2> Managed Identity
3> Legacy

The application object is the global representation of your application for use across all tenants, and the service principal is the local representation for use in a specific tenant.

Types of consent application needs to have to access resources
1> static user consent, 
2> incremental or dynamic user consent
3>admin consent.


A> API Management service
*API Gateway
*Azure portal
*Developer portal

B> API Products => have one or more API

C> Types of API Products => Open, Protected

D> API Gateway patterns
* Gateway routing
* Gateway aggregation
* Gateway Offloading

E> Policies are a collection of Statements that are executed sequentially on the request or response of an API.

F> Types of basic policies
*inbound
*backend
*outbound
*on-error

G> Types of adavnced policies 
*choose
*forward-request
*limit-concurrency
*log-to-eventhub
*mock-response
*retry
*return-response

H> Azure Event Grid
Event Source => Message Endpoint => Event => Topic => Subscriptions => Event Handlers

I>Event Drop, Event Letter Drop, Event Retry, Event Size, Event Batches, Event Subjects, Message Endpoint

J> Azure Event Hub
checkpoint store

K> Azure Event Hubs Client Library
Azure.Messaging.EventHubs

L> A vault is logical group of secrets in Azure Key Vault.

M> Managed Identity
* System assigned managed identity
* User assigned managed identity

N> Azure App Configuration Service


O> Do not think that it is required to know all products and features down to the bits to pass the Azure exams. However, deep knowledge in the security, compute, network, and 
databases categories is expected.


---
Azure Jargon
Resource Hierarchy
Authorization Request
virtual network interface card (NIC)
on-behalf-of flow, middle tier -- please research this urgently
Please research more about webhooks
Azure Instance Metadata Service
